/**
  695. 岛屿的最大面积
  给你一个大小为 m x n 的二进制矩阵 grid 。

  岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在 水平或者竖直的四个方向上 相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。

  岛屿的面积是岛上值为 1 的单元格的数目。

  计算并返回 grid 中最大的岛屿面积。如果没有岛屿，则返回面积为 0 。

  

  示例 1：


  输入：grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
  输出：6
  解释：答案不应该是 11 ，因为岛屿只能包含水平或垂直这四个方向上的 1 。
  示例 2：

  输入：grid = [[0,0,0,0,0,0,0,0]]
  输出：0
 */

/**
 * @param {number[][]} grid
 * @return {number}
 * 从第一个是岛屿的元素开始上下左右递归
 * 遇到岛屿面积加1，元素设置-1
 * 递归的终止条件元素不等于1和越界
 */
var maxAreaOfIsland = function (grid) {
  function dfs(i, j) {
    if (
      i < 0 ||
      i > grid.length - 1 ||
      j < 0 ||
      j > grid[0].length ||
      grid[i][j] !== 1
    ) {
      return 0;
    }

    if (grid[i][j] === 1) {
      grid[i][j] = 2;
    }

    return 1 + dfs(i + 1, j) + dfs(i - 1, j) + dfs(i, j + 1) + dfs(i, j - 1);
  }

  let area = 0;

  for (let i = 0; i < grid.length; i++) {
    for (let j = 0; j < grid[0].length; j++) {
      if (grid[i][j] === 1) {
        const res = dfs(i, j);
        area = Math.max(res, area);
      }
    }
  }

  return area;
};

const res = maxAreaOfIsland([
  [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
  [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0],
  [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
]);
console.log(res);
