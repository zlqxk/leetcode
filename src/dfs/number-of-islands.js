/**
  200. 岛屿数量
  给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。

  岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。

  此外，你可以假设该网格的四条边均被水包围。

  

  示例 1：

  输入：grid = [
    ["1","1","1","1","0"],
    ["1","1","0","1","0"],
    ["1","1","0","0","0"],
    ["0","0","0","0","0"]
  ]
  输出：1
  示例 2：

  输入：grid = [
    ["1","1","0","0","0"],
    ["1","1","0","0","0"],
    ["0","0","1","0","0"],
    ["0","0","0","1","1"]
  ]
  输出：3
 */

/**
 * @param {character[][]} grid
 * @return {number}
 * 网格的深度优先遍历，每遍历一个都将其设置成2
 */
var numIslands = function (grid) {
  function dfs(x, y) {
    if (
      x > grid.length - 1 ||
      x < 0 ||
      y > grid[0].length - 1 ||
      y < 0 ||
      grid[x][y] !== "1"
    )
      return;
    if (grid[x][y] === "1") {
      grid[x][y] = "2";
    }
    dfs(x + 1, y);
    dfs(x - 1, y);
    dfs(x, y + 1);
    dfs(x, y - 1);
  }

  let count = 0;
  // 从上到下
  for (let i = 0; i < grid.length; i++) {
    // 从左到右
    for (let j = 0; j < grid[0].length; j++) {
      if (grid[i][j] === "1") {
        count++;
        dfs(i, j);
      }
    }
  }

  return count;
};

numIslands([
  ["1", "1", "0", "0", "0"],
  ["1", "1", "0", "0", "0"],
  ["0", "0", "1", "0", "0"],
  ["0", "0", "0", "1", "1"],
]);
